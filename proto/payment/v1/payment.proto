syntax = "proto3";

package payment.v1;

import "google/protobuf/timestamp.proto";
import "proto/common/v1/errors.proto";
import "proto/common/v1/types.proto";

option go_package = "github.com/traffic-tacos/proto-contracts/gen/go/payment/v1;paymentv1";
option java_multiple_files = true;
option java_outer_classname = "PaymentProto";
option java_package = "com.traffic_tacos.payment.v1";

// Payment service simulates external payment processing
// Supports various scenarios: approve, fail, delay, random
service PaymentService {
  // Create a payment intent for a reservation
  rpc CreatePaymentIntent(CreatePaymentIntentRequest) returns (CreatePaymentIntentResponse);

  // Process payment (simulate external payment gateway)
  rpc ProcessPayment(ProcessPaymentRequest) returns (ProcessPaymentResponse);

  // Get payment status
  rpc GetPaymentStatus(GetPaymentStatusRequest) returns (GetPaymentStatusResponse);

  // Cancel/refund payment
  rpc CancelPayment(CancelPaymentRequest) returns (CancelPaymentResponse);

  // List payments for a user
  rpc ListPayments(ListPaymentsRequest) returns (ListPaymentsResponse);

  // Webhook simulation endpoints
  rpc SimulateWebhook(SimulateWebhookRequest) returns (SimulateWebhookResponse);
}

// Create payment intent request
message CreatePaymentIntentRequest {
  string reservation_id = 1;
  common.v1.Money amount = 2;
  string user_id = 3;
  PaymentMethod method = 4;
  PaymentScenario scenario = 5; // For simulation
  string webhook_url = 6; // Callback URL
  string idempotency_key = 7;
  PaymentMetadata metadata = 8;
}

// Create payment intent response
message CreatePaymentIntentResponse {
  string payment_intent_id = 1;
  PaymentStatus status = 2;
  string client_secret = 3; // For frontend payment processing
  string payment_url = 4; // Redirect URL for payment
  google.protobuf.Timestamp expires_at = 5;
  common.v1.Error error = 6;
}

// Process payment request
message ProcessPaymentRequest {
  string payment_intent_id = 1;
  PaymentDetails payment_details = 2;
  string idempotency_key = 3;
}

// Process payment response
message ProcessPaymentResponse {
  string payment_id = 1;
  PaymentStatus status = 2;
  google.protobuf.Timestamp processed_at = 3;
  string transaction_id = 4; // External payment system transaction ID
  PaymentResult result = 5;
  common.v1.Error error = 6;
}

// Get payment status request
message GetPaymentStatusRequest {
  string payment_intent_id = 1;
  string user_id = 2; // For authorization
}

// Get payment status response
message GetPaymentStatusResponse {
  Payment payment = 1;
  common.v1.Error error = 2;
}

// Cancel payment request
message CancelPaymentRequest {
  string payment_intent_id = 1;
  string reason = 2;
  common.v1.Money refund_amount = 3; // Optional partial refund
  string idempotency_key = 4;
}

// Cancel payment response
message CancelPaymentResponse {
  PaymentStatus status = 1;
  google.protobuf.Timestamp cancelled_at = 2;
  common.v1.Money refunded_amount = 3;
  string refund_id = 4;
  common.v1.Error error = 5;
}

// List payments request
message ListPaymentsRequest {
  string user_id = 1;
  PaymentStatus status = 2; // Optional filter
  string reservation_id = 3; // Optional filter
  common.v1.Pagination pagination = 4;
}

// List payments response
message ListPaymentsResponse {
  repeated Payment payments = 1;
  common.v1.PageInfo page_info = 2;
  common.v1.Error error = 3;
}

// Simulate webhook request
message SimulateWebhookRequest {
  string payment_intent_id = 1;
  PaymentStatus target_status = 2;
  int32 delay_seconds = 3; // Simulate processing delay
  bool force_trigger = 4; // Force immediate webhook
}

// Simulate webhook response
message SimulateWebhookResponse {
  bool webhook_sent = 1;
  string webhook_id = 2;
  google.protobuf.Timestamp scheduled_at = 3;
  common.v1.Error error = 4;
}

// Payment entity
message Payment {
  string payment_intent_id = 1;
  string payment_id = 2;
  string reservation_id = 3;
  string user_id = 4;
  PaymentStatus status = 5;
  common.v1.Money amount = 6;
  PaymentMethod method = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
  google.protobuf.Timestamp processed_at = 10;
  string transaction_id = 11;
  PaymentResult result = 12;
  PaymentMetadata metadata = 13;
}

// Payment details for processing
message PaymentDetails {
  PaymentMethod method = 1;
  CreditCardDetails credit_card = 2;
  BankTransferDetails bank_transfer = 3;
  MobilePayDetails mobile_pay = 4;
}

// Credit card payment details
message CreditCardDetails {
  string card_number = 1; // Masked for security
  string expiry_month = 2;
  string expiry_year = 3;
  string cardholder_name = 4;
  string cvv = 5; // Should be encrypted/tokenized
}

// Bank transfer details
message BankTransferDetails {
  string bank_code = 1;
  string account_number = 2; // Masked for security
  string account_holder = 3;
}

// Mobile payment details
message MobilePayDetails {
  string provider = 1; // KakaoPay, NaverPay, etc.
  string mobile_number = 2;
}

// Payment metadata
message PaymentMetadata {
  string source = 1; // web, mobile, api
  string user_agent = 2;
  string ip_address = 3;
  string session_id = 4;
  PaymentScenario scenario = 5; // For simulation
  map<string, string> tags = 6;
}

// Payment result details
message PaymentResult {
  bool success = 1;
  string failure_reason = 2;
  string gateway_response = 3;
  int32 response_code = 4;
  google.protobuf.Timestamp processed_at = 5;
}

// Payment method enumeration
enum PaymentMethod {
  PAYMENT_METHOD_UNSPECIFIED = 0;
  PAYMENT_METHOD_CREDIT_CARD = 1;
  PAYMENT_METHOD_DEBIT_CARD = 2;
  PAYMENT_METHOD_BANK_TRANSFER = 3;
  PAYMENT_METHOD_MOBILE_PAY = 4;
  PAYMENT_METHOD_DIGITAL_WALLET = 5;
}

// Payment status enumeration
enum PaymentStatus {
  PAYMENT_STATUS_UNSPECIFIED = 0;
  PAYMENT_STATUS_PENDING = 1; // Created, awaiting processing
  PAYMENT_STATUS_PROCESSING = 2; // Currently being processed
  PAYMENT_STATUS_COMPLETED = 3; // Successfully completed
  PAYMENT_STATUS_FAILED = 4; // Failed processing
  PAYMENT_STATUS_CANCELLED = 5; // Cancelled by user or system
  PAYMENT_STATUS_REFUNDED = 6; // Refunded after completion
  PAYMENT_STATUS_EXPIRED = 7; // Payment intent expired
}

// Payment scenario for simulation
enum PaymentScenario {
  PAYMENT_SCENARIO_UNSPECIFIED = 0;
  PAYMENT_SCENARIO_APPROVE = 1; // Always approve
  PAYMENT_SCENARIO_FAIL = 2; // Always fail
  PAYMENT_SCENARIO_DELAY = 3; // Approve with delay
  PAYMENT_SCENARIO_RANDOM = 4; // Random outcome
  PAYMENT_SCENARIO_TIMEOUT = 5; // Simulate timeout
}

syntax = "proto3";

package gateway.v1;

import "google/protobuf/timestamp.proto";
import "proto/common/v1/errors.proto";
import "proto/common/v1/types.proto";

option go_package = "github.com/traffic-tacos/proto-contracts/gen/go/gateway/v1;gatewayv1";
option java_multiple_files = true;
option java_outer_classname = "WebhookProto";
option java_package = "com.traffic_tacos.gateway.v1";

// Webhook service for receiving external events
// Primarily handles payment webhooks from payment-sim-api
service WebhookService {
  // Receive payment webhook events
  rpc ReceivePaymentWebhook(ReceivePaymentWebhookRequest) returns (ReceivePaymentWebhookResponse);

  // Receive reservation expiry webhook from EventBridge/Lambda
  rpc ReceiveExpiryWebhook(ReceiveExpiryWebhookRequest) returns (ReceiveExpiryWebhookResponse);

  // Register webhook endpoint for external services
  rpc RegisterWebhook(RegisterWebhookRequest) returns (RegisterWebhookResponse);

  // Validate webhook signature
  rpc ValidateWebhook(ValidateWebhookRequest) returns (ValidateWebhookResponse);
}

// Payment webhook request
message ReceivePaymentWebhookRequest {
  string webhook_id = 1;
  PaymentWebhookType event_type = 2;
  PaymentWebhookData data = 3;
  google.protobuf.Timestamp timestamp = 4;
  string signature = 5; // HMAC signature for verification
  string source = 6; // payment-sim-api, stripe, etc.
  int32 attempt = 7; // Retry attempt number
}

// Payment webhook response
message ReceivePaymentWebhookResponse {
  bool accepted = 1;
  string correlation_id = 2;
  google.protobuf.Timestamp processed_at = 3;
  string next_action = 4; // "processed", "retry", "ignore"
  common.v1.Error error = 5;
}

// Expiry webhook request
message ReceiveExpiryWebhookRequest {
  string webhook_id = 1;
  string reservation_id = 2;
  google.protobuf.Timestamp expired_at = 3;
  string source = 4; // eventbridge, lambda, scheduler
  map<string, string> metadata = 5;
}

// Expiry webhook response
message ReceiveExpiryWebhookResponse {
  bool accepted = 1;
  string correlation_id = 2;
  google.protobuf.Timestamp processed_at = 3;
  common.v1.Error error = 4;
}

// Register webhook request
message RegisterWebhookRequest {
  string service_name = 1;
  string endpoint_url = 2;
  repeated WebhookEventType event_types = 3;
  string secret = 4; // For HMAC signature
  WebhookConfig config = 5;
}

// Register webhook response
message RegisterWebhookResponse {
  string webhook_id = 1;
  bool registered = 2;
  google.protobuf.Timestamp registered_at = 3;
  common.v1.Error error = 4;
}

// Validate webhook request
message ValidateWebhookRequest {
  string payload = 1; // Raw webhook payload
  string signature = 2; // Provided signature
  string webhook_id = 3; // Webhook registration ID
}

// Validate webhook response
message ValidateWebhookResponse {
  bool valid = 1;
  string reason = 2; // If invalid, reason why
  google.protobuf.Timestamp validated_at = 3;
  common.v1.Error error = 4;
}

// Payment webhook data
message PaymentWebhookData {
  string payment_intent_id = 1;
  string reservation_id = 2;
  string transaction_id = 3;
  PaymentWebhookStatus status = 4;
  common.v1.Money amount = 5;
  string failure_reason = 6; // If status is failed
  map<string, string> metadata = 7;
  google.protobuf.Timestamp processed_at = 8;
}

// Webhook configuration
message WebhookConfig {
  int32 retry_count = 1;
  int32 timeout_seconds = 2;
  bool verify_ssl = 3;
  map<string, string> headers = 4;
  string content_type = 5;
}

// Payment webhook type enumeration
enum PaymentWebhookType {
  PAYMENT_WEBHOOK_TYPE_UNSPECIFIED = 0;
  PAYMENT_WEBHOOK_TYPE_APPROVED = 1;
  PAYMENT_WEBHOOK_TYPE_FAILED = 2;
  PAYMENT_WEBHOOK_TYPE_CANCELLED = 3;
  PAYMENT_WEBHOOK_TYPE_REFUNDED = 4;
  PAYMENT_WEBHOOK_TYPE_PENDING = 5;
}

// Payment webhook status enumeration
enum PaymentWebhookStatus {
  PAYMENT_WEBHOOK_STATUS_UNSPECIFIED = 0;
  PAYMENT_WEBHOOK_STATUS_SUCCESS = 1;
  PAYMENT_WEBHOOK_STATUS_FAILED = 2;
  PAYMENT_WEBHOOK_STATUS_CANCELLED = 3;
  PAYMENT_WEBHOOK_STATUS_REFUNDED = 4;
  PAYMENT_WEBHOOK_STATUS_TIMEOUT = 5;
}

// Webhook event type enumeration
enum WebhookEventType {
  WEBHOOK_EVENT_TYPE_UNSPECIFIED = 0;
  WEBHOOK_EVENT_TYPE_PAYMENT_APPROVED = 1;
  WEBHOOK_EVENT_TYPE_PAYMENT_FAILED = 2;
  WEBHOOK_EVENT_TYPE_PAYMENT_CANCELLED = 3;
  WEBHOOK_EVENT_TYPE_RESERVATION_EXPIRED = 4;
  WEBHOOK_EVENT_TYPE_SYSTEM_MAINTENANCE = 5;
}

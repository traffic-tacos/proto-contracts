// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/common/v1/errors.proto
// Protobuf Java Version: 4.32.1

package com.traffic_tacos.common.v1;

/**
 * <pre>
 * Standard error codes across all services
 * </pre>
 *
 * Protobuf enum {@code common.v1.ErrorCode}
 */
@com.google.protobuf.Generated
public enum ErrorCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ERROR_CODE_UNSPECIFIED = 0;</code>
   */
  ERROR_CODE_UNSPECIFIED(0),
  /**
   * <pre>
   * Authentication and authorization errors (4xx)
   * </pre>
   *
   * <code>ERROR_CODE_UNAUTHENTICATED = 1;</code>
   */
  ERROR_CODE_UNAUTHENTICATED(1),
  /**
   * <code>ERROR_CODE_FORBIDDEN = 2;</code>
   */
  ERROR_CODE_FORBIDDEN(2),
  /**
   * <code>ERROR_CODE_UNAUTHORIZED = 3;</code>
   */
  ERROR_CODE_UNAUTHORIZED(3),
  /**
   * <pre>
   * Request validation errors (4xx)
   * </pre>
   *
   * <code>ERROR_CODE_INVALID_ARGUMENT = 4;</code>
   */
  ERROR_CODE_INVALID_ARGUMENT(4),
  /**
   * <code>ERROR_CODE_NOT_FOUND = 5;</code>
   */
  ERROR_CODE_NOT_FOUND(5),
  /**
   * <code>ERROR_CODE_ALREADY_EXISTS = 6;</code>
   */
  ERROR_CODE_ALREADY_EXISTS(6),
  /**
   * <code>ERROR_CODE_FAILED_PRECONDITION = 7;</code>
   */
  ERROR_CODE_FAILED_PRECONDITION(7),
  /**
   * <pre>
   * Rate limiting and quota errors (4xx)
   * </pre>
   *
   * <code>ERROR_CODE_RATE_LIMITED = 8;</code>
   */
  ERROR_CODE_RATE_LIMITED(8),
  /**
   * <code>ERROR_CODE_QUOTA_EXCEEDED = 9;</code>
   */
  ERROR_CODE_QUOTA_EXCEEDED(9),
  /**
   * <pre>
   * Idempotency errors (4xx)
   * </pre>
   *
   * <code>ERROR_CODE_IDEMPOTENCY_REQUIRED = 10;</code>
   */
  ERROR_CODE_IDEMPOTENCY_REQUIRED(10),
  /**
   * <code>ERROR_CODE_IDEMPOTENCY_CONFLICT = 11;</code>
   */
  ERROR_CODE_IDEMPOTENCY_CONFLICT(11),
  /**
   * <pre>
   * Business logic errors (4xx)
   * </pre>
   *
   * <code>ERROR_CODE_RESERVATION_EXPIRED = 12;</code>
   */
  ERROR_CODE_RESERVATION_EXPIRED(12),
  /**
   * <code>ERROR_CODE_PAYMENT_NOT_APPROVED = 13;</code>
   */
  ERROR_CODE_PAYMENT_NOT_APPROVED(13),
  /**
   * <code>ERROR_CODE_INVENTORY_CONFLICT = 14;</code>
   */
  ERROR_CODE_INVENTORY_CONFLICT(14),
  /**
   * <code>ERROR_CODE_INSUFFICIENT_INVENTORY = 15;</code>
   */
  ERROR_CODE_INSUFFICIENT_INVENTORY(15),
  /**
   * <pre>
   * Service availability errors (5xx)
   * </pre>
   *
   * <code>ERROR_CODE_INTERNAL = 16;</code>
   */
  ERROR_CODE_INTERNAL(16),
  /**
   * <code>ERROR_CODE_UNAVAILABLE = 17;</code>
   */
  ERROR_CODE_UNAVAILABLE(17),
  /**
   * <code>ERROR_CODE_TIMEOUT = 18;</code>
   */
  ERROR_CODE_TIMEOUT(18),
  /**
   * <code>ERROR_CODE_UPSTREAM_TIMEOUT = 19;</code>
   */
  ERROR_CODE_UPSTREAM_TIMEOUT(19),
  /**
   * <code>ERROR_CODE_UPSTREAM_ERROR = 20;</code>
   */
  ERROR_CODE_UPSTREAM_ERROR(20),
  /**
   * <pre>
   * Data consistency errors (5xx)
   * </pre>
   *
   * <code>ERROR_CODE_DATA_CORRUPTION = 21;</code>
   */
  ERROR_CODE_DATA_CORRUPTION(21),
  /**
   * <code>ERROR_CODE_CONCURRENT_MODIFICATION = 22;</code>
   */
  ERROR_CODE_CONCURRENT_MODIFICATION(22),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 32,
      /* patch= */ 1,
      /* suffix= */ "",
      ErrorCode.class.getName());
  }
  /**
   * <code>ERROR_CODE_UNSPECIFIED = 0;</code>
   */
  public static final int ERROR_CODE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Authentication and authorization errors (4xx)
   * </pre>
   *
   * <code>ERROR_CODE_UNAUTHENTICATED = 1;</code>
   */
  public static final int ERROR_CODE_UNAUTHENTICATED_VALUE = 1;
  /**
   * <code>ERROR_CODE_FORBIDDEN = 2;</code>
   */
  public static final int ERROR_CODE_FORBIDDEN_VALUE = 2;
  /**
   * <code>ERROR_CODE_UNAUTHORIZED = 3;</code>
   */
  public static final int ERROR_CODE_UNAUTHORIZED_VALUE = 3;
  /**
   * <pre>
   * Request validation errors (4xx)
   * </pre>
   *
   * <code>ERROR_CODE_INVALID_ARGUMENT = 4;</code>
   */
  public static final int ERROR_CODE_INVALID_ARGUMENT_VALUE = 4;
  /**
   * <code>ERROR_CODE_NOT_FOUND = 5;</code>
   */
  public static final int ERROR_CODE_NOT_FOUND_VALUE = 5;
  /**
   * <code>ERROR_CODE_ALREADY_EXISTS = 6;</code>
   */
  public static final int ERROR_CODE_ALREADY_EXISTS_VALUE = 6;
  /**
   * <code>ERROR_CODE_FAILED_PRECONDITION = 7;</code>
   */
  public static final int ERROR_CODE_FAILED_PRECONDITION_VALUE = 7;
  /**
   * <pre>
   * Rate limiting and quota errors (4xx)
   * </pre>
   *
   * <code>ERROR_CODE_RATE_LIMITED = 8;</code>
   */
  public static final int ERROR_CODE_RATE_LIMITED_VALUE = 8;
  /**
   * <code>ERROR_CODE_QUOTA_EXCEEDED = 9;</code>
   */
  public static final int ERROR_CODE_QUOTA_EXCEEDED_VALUE = 9;
  /**
   * <pre>
   * Idempotency errors (4xx)
   * </pre>
   *
   * <code>ERROR_CODE_IDEMPOTENCY_REQUIRED = 10;</code>
   */
  public static final int ERROR_CODE_IDEMPOTENCY_REQUIRED_VALUE = 10;
  /**
   * <code>ERROR_CODE_IDEMPOTENCY_CONFLICT = 11;</code>
   */
  public static final int ERROR_CODE_IDEMPOTENCY_CONFLICT_VALUE = 11;
  /**
   * <pre>
   * Business logic errors (4xx)
   * </pre>
   *
   * <code>ERROR_CODE_RESERVATION_EXPIRED = 12;</code>
   */
  public static final int ERROR_CODE_RESERVATION_EXPIRED_VALUE = 12;
  /**
   * <code>ERROR_CODE_PAYMENT_NOT_APPROVED = 13;</code>
   */
  public static final int ERROR_CODE_PAYMENT_NOT_APPROVED_VALUE = 13;
  /**
   * <code>ERROR_CODE_INVENTORY_CONFLICT = 14;</code>
   */
  public static final int ERROR_CODE_INVENTORY_CONFLICT_VALUE = 14;
  /**
   * <code>ERROR_CODE_INSUFFICIENT_INVENTORY = 15;</code>
   */
  public static final int ERROR_CODE_INSUFFICIENT_INVENTORY_VALUE = 15;
  /**
   * <pre>
   * Service availability errors (5xx)
   * </pre>
   *
   * <code>ERROR_CODE_INTERNAL = 16;</code>
   */
  public static final int ERROR_CODE_INTERNAL_VALUE = 16;
  /**
   * <code>ERROR_CODE_UNAVAILABLE = 17;</code>
   */
  public static final int ERROR_CODE_UNAVAILABLE_VALUE = 17;
  /**
   * <code>ERROR_CODE_TIMEOUT = 18;</code>
   */
  public static final int ERROR_CODE_TIMEOUT_VALUE = 18;
  /**
   * <code>ERROR_CODE_UPSTREAM_TIMEOUT = 19;</code>
   */
  public static final int ERROR_CODE_UPSTREAM_TIMEOUT_VALUE = 19;
  /**
   * <code>ERROR_CODE_UPSTREAM_ERROR = 20;</code>
   */
  public static final int ERROR_CODE_UPSTREAM_ERROR_VALUE = 20;
  /**
   * <pre>
   * Data consistency errors (5xx)
   * </pre>
   *
   * <code>ERROR_CODE_DATA_CORRUPTION = 21;</code>
   */
  public static final int ERROR_CODE_DATA_CORRUPTION_VALUE = 21;
  /**
   * <code>ERROR_CODE_CONCURRENT_MODIFICATION = 22;</code>
   */
  public static final int ERROR_CODE_CONCURRENT_MODIFICATION_VALUE = 22;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ErrorCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ErrorCode forNumber(int value) {
    switch (value) {
      case 0: return ERROR_CODE_UNSPECIFIED;
      case 1: return ERROR_CODE_UNAUTHENTICATED;
      case 2: return ERROR_CODE_FORBIDDEN;
      case 3: return ERROR_CODE_UNAUTHORIZED;
      case 4: return ERROR_CODE_INVALID_ARGUMENT;
      case 5: return ERROR_CODE_NOT_FOUND;
      case 6: return ERROR_CODE_ALREADY_EXISTS;
      case 7: return ERROR_CODE_FAILED_PRECONDITION;
      case 8: return ERROR_CODE_RATE_LIMITED;
      case 9: return ERROR_CODE_QUOTA_EXCEEDED;
      case 10: return ERROR_CODE_IDEMPOTENCY_REQUIRED;
      case 11: return ERROR_CODE_IDEMPOTENCY_CONFLICT;
      case 12: return ERROR_CODE_RESERVATION_EXPIRED;
      case 13: return ERROR_CODE_PAYMENT_NOT_APPROVED;
      case 14: return ERROR_CODE_INVENTORY_CONFLICT;
      case 15: return ERROR_CODE_INSUFFICIENT_INVENTORY;
      case 16: return ERROR_CODE_INTERNAL;
      case 17: return ERROR_CODE_UNAVAILABLE;
      case 18: return ERROR_CODE_TIMEOUT;
      case 19: return ERROR_CODE_UPSTREAM_TIMEOUT;
      case 20: return ERROR_CODE_UPSTREAM_ERROR;
      case 21: return ERROR_CODE_DATA_CORRUPTION;
      case 22: return ERROR_CODE_CONCURRENT_MODIFICATION;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ErrorCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ErrorCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ErrorCode>() {
          public ErrorCode findValueByNumber(int number) {
            return ErrorCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.traffic_tacos.common.v1.ErrorsProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final ErrorCode[] VALUES = values();

  public static ErrorCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ErrorCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:common.v1.ErrorCode)
}


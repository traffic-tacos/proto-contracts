// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/gateway/v1/webhook.proto

package gatewayv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebhookService_ReceivePaymentWebhook_FullMethodName = "/gateway.v1.WebhookService/ReceivePaymentWebhook"
	WebhookService_ReceiveExpiryWebhook_FullMethodName  = "/gateway.v1.WebhookService/ReceiveExpiryWebhook"
	WebhookService_RegisterWebhook_FullMethodName       = "/gateway.v1.WebhookService/RegisterWebhook"
	WebhookService_ValidateWebhook_FullMethodName       = "/gateway.v1.WebhookService/ValidateWebhook"
)

// WebhookServiceClient is the client API for WebhookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Webhook service for receiving external events
// Primarily handles payment webhooks from payment-sim-api
type WebhookServiceClient interface {
	// Receive payment webhook events
	ReceivePaymentWebhook(ctx context.Context, in *ReceivePaymentWebhookRequest, opts ...grpc.CallOption) (*ReceivePaymentWebhookResponse, error)
	// Receive reservation expiry webhook from EventBridge/Lambda
	ReceiveExpiryWebhook(ctx context.Context, in *ReceiveExpiryWebhookRequest, opts ...grpc.CallOption) (*ReceiveExpiryWebhookResponse, error)
	// Register webhook endpoint for external services
	RegisterWebhook(ctx context.Context, in *RegisterWebhookRequest, opts ...grpc.CallOption) (*RegisterWebhookResponse, error)
	// Validate webhook signature
	ValidateWebhook(ctx context.Context, in *ValidateWebhookRequest, opts ...grpc.CallOption) (*ValidateWebhookResponse, error)
}

type webhookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookServiceClient(cc grpc.ClientConnInterface) WebhookServiceClient {
	return &webhookServiceClient{cc}
}

func (c *webhookServiceClient) ReceivePaymentWebhook(ctx context.Context, in *ReceivePaymentWebhookRequest, opts ...grpc.CallOption) (*ReceivePaymentWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceivePaymentWebhookResponse)
	err := c.cc.Invoke(ctx, WebhookService_ReceivePaymentWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) ReceiveExpiryWebhook(ctx context.Context, in *ReceiveExpiryWebhookRequest, opts ...grpc.CallOption) (*ReceiveExpiryWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveExpiryWebhookResponse)
	err := c.cc.Invoke(ctx, WebhookService_ReceiveExpiryWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) RegisterWebhook(ctx context.Context, in *RegisterWebhookRequest, opts ...grpc.CallOption) (*RegisterWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterWebhookResponse)
	err := c.cc.Invoke(ctx, WebhookService_RegisterWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) ValidateWebhook(ctx context.Context, in *ValidateWebhookRequest, opts ...grpc.CallOption) (*ValidateWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateWebhookResponse)
	err := c.cc.Invoke(ctx, WebhookService_ValidateWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookServiceServer is the server API for WebhookService service.
// All implementations should embed UnimplementedWebhookServiceServer
// for forward compatibility.
//
// Webhook service for receiving external events
// Primarily handles payment webhooks from payment-sim-api
type WebhookServiceServer interface {
	// Receive payment webhook events
	ReceivePaymentWebhook(context.Context, *ReceivePaymentWebhookRequest) (*ReceivePaymentWebhookResponse, error)
	// Receive reservation expiry webhook from EventBridge/Lambda
	ReceiveExpiryWebhook(context.Context, *ReceiveExpiryWebhookRequest) (*ReceiveExpiryWebhookResponse, error)
	// Register webhook endpoint for external services
	RegisterWebhook(context.Context, *RegisterWebhookRequest) (*RegisterWebhookResponse, error)
	// Validate webhook signature
	ValidateWebhook(context.Context, *ValidateWebhookRequest) (*ValidateWebhookResponse, error)
}

// UnimplementedWebhookServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebhookServiceServer struct{}

func (UnimplementedWebhookServiceServer) ReceivePaymentWebhook(context.Context, *ReceivePaymentWebhookRequest) (*ReceivePaymentWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePaymentWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) ReceiveExpiryWebhook(context.Context, *ReceiveExpiryWebhookRequest) (*ReceiveExpiryWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveExpiryWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) RegisterWebhook(context.Context, *RegisterWebhookRequest) (*RegisterWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) ValidateWebhook(context.Context, *ValidateWebhookRequest) (*ValidateWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateWebhook not implemented")
}
func (UnimplementedWebhookServiceServer) testEmbeddedByValue() {}

// UnsafeWebhookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookServiceServer will
// result in compilation errors.
type UnsafeWebhookServiceServer interface {
	mustEmbedUnimplementedWebhookServiceServer()
}

func RegisterWebhookServiceServer(s grpc.ServiceRegistrar, srv WebhookServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebhookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebhookService_ServiceDesc, srv)
}

func _WebhookService_ReceivePaymentWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivePaymentWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).ReceivePaymentWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_ReceivePaymentWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).ReceivePaymentWebhook(ctx, req.(*ReceivePaymentWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_ReceiveExpiryWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveExpiryWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).ReceiveExpiryWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_ReceiveExpiryWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).ReceiveExpiryWebhook(ctx, req.(*ReceiveExpiryWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_RegisterWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).RegisterWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_RegisterWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).RegisterWebhook(ctx, req.(*RegisterWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_ValidateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).ValidateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookService_ValidateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).ValidateWebhook(ctx, req.(*ValidateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookService_ServiceDesc is the grpc.ServiceDesc for WebhookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.v1.WebhookService",
	HandlerType: (*WebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceivePaymentWebhook",
			Handler:    _WebhookService_ReceivePaymentWebhook_Handler,
		},
		{
			MethodName: "ReceiveExpiryWebhook",
			Handler:    _WebhookService_ReceiveExpiryWebhook_Handler,
		},
		{
			MethodName: "RegisterWebhook",
			Handler:    _WebhookService_RegisterWebhook_Handler,
		},
		{
			MethodName: "ValidateWebhook",
			Handler:    _WebhookService_ValidateWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gateway/v1/webhook.proto",
}

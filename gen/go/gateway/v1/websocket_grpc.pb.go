// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/gateway/v1/websocket.proto

package gatewayv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebSocketService_StreamQueueUpdates_FullMethodName       = "/gateway.v1.WebSocketService/StreamQueueUpdates"
	WebSocketService_StreamReservationUpdates_FullMethodName = "/gateway.v1.WebSocketService/StreamReservationUpdates"
	WebSocketService_StreamPaymentUpdates_FullMethodName     = "/gateway.v1.WebSocketService/StreamPaymentUpdates"
	WebSocketService_SendMessage_FullMethodName              = "/gateway.v1.WebSocketService/SendMessage"
)

// WebSocketServiceClient is the client API for WebSocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WebSocket service for real-time updates
// Handles queue position updates, reservation status changes, payment updates
type WebSocketServiceClient interface {
	// Establish real-time connection for queue updates
	StreamQueueUpdates(ctx context.Context, in *StreamQueueUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamQueueUpdatesResponse], error)
	// Establish real-time connection for reservation updates
	StreamReservationUpdates(ctx context.Context, in *StreamReservationUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamReservationUpdatesResponse], error)
	// Establish real-time connection for payment updates
	StreamPaymentUpdates(ctx context.Context, in *StreamPaymentUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamPaymentUpdatesResponse], error)
	// Send a message to a specific user/session
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type webSocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebSocketServiceClient(cc grpc.ClientConnInterface) WebSocketServiceClient {
	return &webSocketServiceClient{cc}
}

func (c *webSocketServiceClient) StreamQueueUpdates(ctx context.Context, in *StreamQueueUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamQueueUpdatesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WebSocketService_ServiceDesc.Streams[0], WebSocketService_StreamQueueUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamQueueUpdatesRequest, StreamQueueUpdatesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebSocketService_StreamQueueUpdatesClient = grpc.ServerStreamingClient[StreamQueueUpdatesResponse]

func (c *webSocketServiceClient) StreamReservationUpdates(ctx context.Context, in *StreamReservationUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamReservationUpdatesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WebSocketService_ServiceDesc.Streams[1], WebSocketService_StreamReservationUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamReservationUpdatesRequest, StreamReservationUpdatesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebSocketService_StreamReservationUpdatesClient = grpc.ServerStreamingClient[StreamReservationUpdatesResponse]

func (c *webSocketServiceClient) StreamPaymentUpdates(ctx context.Context, in *StreamPaymentUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamPaymentUpdatesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WebSocketService_ServiceDesc.Streams[2], WebSocketService_StreamPaymentUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamPaymentUpdatesRequest, StreamPaymentUpdatesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebSocketService_StreamPaymentUpdatesClient = grpc.ServerStreamingClient[StreamPaymentUpdatesResponse]

func (c *webSocketServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, WebSocketService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebSocketServiceServer is the server API for WebSocketService service.
// All implementations should embed UnimplementedWebSocketServiceServer
// for forward compatibility.
//
// WebSocket service for real-time updates
// Handles queue position updates, reservation status changes, payment updates
type WebSocketServiceServer interface {
	// Establish real-time connection for queue updates
	StreamQueueUpdates(*StreamQueueUpdatesRequest, grpc.ServerStreamingServer[StreamQueueUpdatesResponse]) error
	// Establish real-time connection for reservation updates
	StreamReservationUpdates(*StreamReservationUpdatesRequest, grpc.ServerStreamingServer[StreamReservationUpdatesResponse]) error
	// Establish real-time connection for payment updates
	StreamPaymentUpdates(*StreamPaymentUpdatesRequest, grpc.ServerStreamingServer[StreamPaymentUpdatesResponse]) error
	// Send a message to a specific user/session
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
}

// UnimplementedWebSocketServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebSocketServiceServer struct{}

func (UnimplementedWebSocketServiceServer) StreamQueueUpdates(*StreamQueueUpdatesRequest, grpc.ServerStreamingServer[StreamQueueUpdatesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamQueueUpdates not implemented")
}
func (UnimplementedWebSocketServiceServer) StreamReservationUpdates(*StreamReservationUpdatesRequest, grpc.ServerStreamingServer[StreamReservationUpdatesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamReservationUpdates not implemented")
}
func (UnimplementedWebSocketServiceServer) StreamPaymentUpdates(*StreamPaymentUpdatesRequest, grpc.ServerStreamingServer[StreamPaymentUpdatesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPaymentUpdates not implemented")
}
func (UnimplementedWebSocketServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedWebSocketServiceServer) testEmbeddedByValue() {}

// UnsafeWebSocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebSocketServiceServer will
// result in compilation errors.
type UnsafeWebSocketServiceServer interface {
	mustEmbedUnimplementedWebSocketServiceServer()
}

func RegisterWebSocketServiceServer(s grpc.ServiceRegistrar, srv WebSocketServiceServer) {
	// If the following call pancis, it indicates UnimplementedWebSocketServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebSocketService_ServiceDesc, srv)
}

func _WebSocketService_StreamQueueUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamQueueUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebSocketServiceServer).StreamQueueUpdates(m, &grpc.GenericServerStream[StreamQueueUpdatesRequest, StreamQueueUpdatesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebSocketService_StreamQueueUpdatesServer = grpc.ServerStreamingServer[StreamQueueUpdatesResponse]

func _WebSocketService_StreamReservationUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReservationUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebSocketServiceServer).StreamReservationUpdates(m, &grpc.GenericServerStream[StreamReservationUpdatesRequest, StreamReservationUpdatesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebSocketService_StreamReservationUpdatesServer = grpc.ServerStreamingServer[StreamReservationUpdatesResponse]

func _WebSocketService_StreamPaymentUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPaymentUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebSocketServiceServer).StreamPaymentUpdates(m, &grpc.GenericServerStream[StreamPaymentUpdatesRequest, StreamPaymentUpdatesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WebSocketService_StreamPaymentUpdatesServer = grpc.ServerStreamingServer[StreamPaymentUpdatesResponse]

func _WebSocketService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebSocketService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebSocketService_ServiceDesc is the grpc.ServiceDesc for WebSocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebSocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.v1.WebSocketService",
	HandlerType: (*WebSocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _WebSocketService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamQueueUpdates",
			Handler:       _WebSocketService_StreamQueueUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamReservationUpdates",
			Handler:       _WebSocketService_StreamReservationUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPaymentUpdates",
			Handler:       _WebSocketService_StreamPaymentUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/gateway/v1/websocket.proto",
}

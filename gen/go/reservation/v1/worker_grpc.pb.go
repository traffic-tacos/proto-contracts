// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/reservation/v1/worker.proto

package reservationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkerService_ProcessReservationExpiry_FullMethodName = "/reservation.v1.WorkerService/ProcessReservationExpiry"
	WorkerService_ProcessPaymentResult_FullMethodName     = "/reservation.v1.WorkerService/ProcessPaymentResult"
	WorkerService_ProcessCompensation_FullMethodName      = "/reservation.v1.WorkerService/ProcessCompensation"
	WorkerService_HealthCheck_FullMethodName              = "/reservation.v1.WorkerService/HealthCheck"
	WorkerService_GetJobStatus_FullMethodName             = "/reservation.v1.WorkerService/GetJobStatus"
)

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Worker service for background event processing
// Handles reservation expiry, payment result processing, and cleanup tasks
// Runs as Kubernetes Job with KEDA auto-scaling based on SQS queue depth
type WorkerServiceClient interface {
	// Process reservation expiry events (60-second hold timeout)
	ProcessReservationExpiry(ctx context.Context, in *ProcessReservationExpiryRequest, opts ...grpc.CallOption) (*ProcessReservationExpiryResponse, error)
	// Process payment result events (approved/failed)
	ProcessPaymentResult(ctx context.Context, in *ProcessPaymentResultRequest, opts ...grpc.CallOption) (*ProcessPaymentResultResponse, error)
	// Process compensation/retry events for failed operations
	ProcessCompensation(ctx context.Context, in *ProcessCompensationRequest, opts ...grpc.CallOption) (*ProcessCompensationResponse, error)
	// Health check for worker instances
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Get worker job status and metrics
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) ProcessReservationExpiry(ctx context.Context, in *ProcessReservationExpiryRequest, opts ...grpc.CallOption) (*ProcessReservationExpiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessReservationExpiryResponse)
	err := c.cc.Invoke(ctx, WorkerService_ProcessReservationExpiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) ProcessPaymentResult(ctx context.Context, in *ProcessPaymentResultRequest, opts ...grpc.CallOption) (*ProcessPaymentResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessPaymentResultResponse)
	err := c.cc.Invoke(ctx, WorkerService_ProcessPaymentResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) ProcessCompensation(ctx context.Context, in *ProcessCompensationRequest, opts ...grpc.CallOption) (*ProcessCompensationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessCompensationResponse)
	err := c.cc.Invoke(ctx, WorkerService_ProcessCompensation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, WorkerService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobStatusResponse)
	err := c.cc.Invoke(ctx, WorkerService_GetJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations should embed UnimplementedWorkerServiceServer
// for forward compatibility.
//
// Worker service for background event processing
// Handles reservation expiry, payment result processing, and cleanup tasks
// Runs as Kubernetes Job with KEDA auto-scaling based on SQS queue depth
type WorkerServiceServer interface {
	// Process reservation expiry events (60-second hold timeout)
	ProcessReservationExpiry(context.Context, *ProcessReservationExpiryRequest) (*ProcessReservationExpiryResponse, error)
	// Process payment result events (approved/failed)
	ProcessPaymentResult(context.Context, *ProcessPaymentResultRequest) (*ProcessPaymentResultResponse, error)
	// Process compensation/retry events for failed operations
	ProcessCompensation(context.Context, *ProcessCompensationRequest) (*ProcessCompensationResponse, error)
	// Health check for worker instances
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Get worker job status and metrics
	GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error)
}

// UnimplementedWorkerServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkerServiceServer struct{}

func (UnimplementedWorkerServiceServer) ProcessReservationExpiry(context.Context, *ProcessReservationExpiryRequest) (*ProcessReservationExpiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessReservationExpiry not implemented")
}
func (UnimplementedWorkerServiceServer) ProcessPaymentResult(context.Context, *ProcessPaymentResultRequest) (*ProcessPaymentResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPaymentResult not implemented")
}
func (UnimplementedWorkerServiceServer) ProcessCompensation(context.Context, *ProcessCompensationRequest) (*ProcessCompensationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCompensation not implemented")
}
func (UnimplementedWorkerServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedWorkerServiceServer) GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedWorkerServiceServer) testEmbeddedByValue() {}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_ProcessReservationExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessReservationExpiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).ProcessReservationExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_ProcessReservationExpiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).ProcessReservationExpiry(ctx, req.(*ProcessReservationExpiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_ProcessPaymentResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).ProcessPaymentResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_ProcessPaymentResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).ProcessPaymentResult(ctx, req.(*ProcessPaymentResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_ProcessCompensation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCompensationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).ProcessCompensation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_ProcessCompensation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).ProcessCompensation(ctx, req.(*ProcessCompensationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_GetJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reservation.v1.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessReservationExpiry",
			Handler:    _WorkerService_ProcessReservationExpiry_Handler,
		},
		{
			MethodName: "ProcessPaymentResult",
			Handler:    _WorkerService_ProcessPaymentResult_Handler,
		},
		{
			MethodName: "ProcessCompensation",
			Handler:    _WorkerService_ProcessCompensation_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _WorkerService_HealthCheck_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _WorkerService_GetJobStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reservation/v1/worker.proto",
}

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: '1.22'
  JAVA_VERSION: '17'

jobs:
  # Lint and validate protobuf definitions
  lint:
    name: Lint Proto Files
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Buf
      uses: bufbuild/buf-setup-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Lint proto files
      run: buf lint

    - name: Check for breaking changes
      if: github.event_name == 'pull_request'
      run: buf breaking --against 'https://github.com/${{ github.repository }}.git#branch=main'

    - name: Format check
      run: |
        buf format --diff --exit-code

  # Generate and test Go code
  test-go:
    name: Test Go Generation
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup Buf
      uses: bufbuild/buf-setup-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install protoc-gen-go
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Generate Go code
      run: make generate-go

    - name: Test Go compilation
      run: go build ./gen/go/...

    - name: Run Go tests
      run: go test -tags=integration ./gen/go/... -v

    - name: Check go.mod is tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

  # Generate and test Kotlin/Java code
  test-kotlin:
    name: Test Kotlin/Java Generation
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: Setup Buf
      uses: bufbuild/buf-setup-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Kotlin/Java code
      run: make generate-kotlin

    - name: Test Kotlin/Java compilation
      run: ./gradlew compileJava compileKotlin

    - name: Run Kotlin/Java tests
      run: ./gradlew test

    - name: Build JAR
      run: ./gradlew build

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: proto-contracts-jar
        path: build/libs/*.jar

  # Integration test across languages
  integration-test:
    name: Cross-Language Integration Test
    runs-on: ubuntu-latest
    needs: [test-go, test-kotlin]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Buf
      uses: bufbuild/buf-setup-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install protoc-gen-go
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Generate all code
      run: make generate

    - name: Run full test suite
      run: make test

    - name: Verify proto compatibility
      run: |
        echo "✅ Cross-language proto compatibility verified"

  # Security and quality checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for sensitive data
      run: |
        # Check for potential secrets in proto files
        if grep -r -i "password\|secret\|key\|token" proto/; then
          echo "❌ Potential sensitive data found in proto files"
          exit 1
        fi
        echo "✅ No sensitive data detected"

  # Documentation and examples
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check README exists and is updated
      run: |
        if [ ! -f README.md ]; then
          echo "❌ README.md not found"
          exit 1
        fi

        # Check if README mentions all proto services
        for proto in proto/*/v1/*.proto; do
          service=$(grep "^service " "$proto" | head -1 | cut -d' ' -f2)
          if ! grep -q "$service" README.md; then
            echo "⚠️  Service $service not documented in README.md"
          fi
        done

        echo "✅ Documentation check completed"

    - name: Validate example code in README
      run: |
        # Extract and validate Go import examples
        if grep -q "import.*github.com/traffic-tacos/proto-contracts" README.md; then
          echo "✅ Go import examples found in README"
        else
          echo "⚠️  No Go import examples in README"
        fi

        # Extract and validate Kotlin import examples
        if grep -q "com.traffic-tacos" README.md; then
          echo "✅ Kotlin import examples found in README"
        else
          echo "⚠️  No Kotlin import examples in README"
        fi